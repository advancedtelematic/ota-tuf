akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  loglevel = ${?AKKA_LOGLEVEL}
  log-config-on-start = off
  log-config-on-start = ${?AKKA_LOG_CONFIG_ON_START}

  http.host-connection-pool {
    # The maximum number of parallel connections that a connection pool to a
    # single host endpoint is allowed to establish. Must be greater than zero.
    max-connections = 2048
    max-connections = ${?AKKA_HTTP_MAX_CONNECTIONS}
    # The maximum number of open requests accepted into the pool across all
    # materializations of any of its client flows.
    # Protects against (accidentally) overloading a single pool with too many client flow materializations.
    # Note that with N concurrent materializations the max number of open request in the pool
    # will never exceed N * max-connections * pipelining-limit.
    # Must be a power of 2 and > 0!
    max-open-requests = 8192
    max-open-requests = ${?AKKA_HTTP_MAX_OPEN_REQUESTS}
  }

  http {
    server {
      max-connections = 1024
      max-connections = ${?AKKA_HTTP_MAX_CONNECTIONS}
      backlog = 2000
      backlog = ${?AKKA_HTTP_BACKLOG}

      // Akka HTTP default value
      idle-timeout = 60 s
      idle-timeout = ${?AKKA_HTTP_SERVER_IDLE_TIMEOUT}
    }

    client {
      // Akka HTTP default value
      idle-timeout = 60 s
      idle-timeout = ${?AKKA_HTTP_CLIENT_IDLE_TIMEOUT}
    }
  }
}

storage {
  type = "s3"
  type = ${?STORAGE_TYPE}
  localStorageRoot = "/tmp/tuf-reposerver-targets"
  localStorageRoot = ${?LOCAL_STORAGE_ROOT}

  s3 {
    accessKey = ${?TUF_REPOSERVER_AWS_ACCESS_KEY}
    secretKey = ${?TUF_REPOSERVER_AWS_SECRET_KEY}
    bucketId = ${?TUF_REPOSERVER_AWS_BUCKET_ID}
    region = "eu-central-1"
    region = ${?TUF_REPOSERVER_AWS_REGION}
  }
}

database = {
  driver = "org.mariadb.jdbc.Driver"
  url = "jdbc:mariadb://127.0.0.1:3306/tuf_repo"
  url = ${?DB_URL}
  properties {
    user = "tuf_repo"
    user = ${?DB_USER}
    password = "tuf_repo"
    password = ${?DB_PASSWORD}
    sessionVariables = "net_write_timeout=10000"
  }
  numThreads = 20
  numThreads = ${?DB_NUM_THREADS}
  queueSize = 1000
  queueSize = ${?DB_QUEUE_SIZE}
  migrate = false
  migrate = ${?DB_MIGRATE}
  registerMbeans = true
}

server = {
  host = "0.0.0.0"
  host = ${?BIND_HOST}
  port = 8085
  port = ${?BIND_PORT}
}

auth {
  protocol = "oauth.accesstoken" # or none
  protocol = ${?AUTH_PROTOCOL}
  verification = "local" # three options: none, local, auth-plus
  verification = ${?AUTH_VERIFICATION}
  token {
    secret = "AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow"
    secret = ${?JWT_SECRET}
  }
}

authplus {
  api.host = "localhost"
  api.host = ${?AUTH_PLUS_HOST}
  api.port = 9001
  api.port = ${?AUTH_PLUS_PORT}
  api.scheme = "http"
  api.scheme = ${?AUTH_PLUS_SCHEME}
  api.uri = ${authplus.api.scheme}"://"${authplus.api.host}":"${authplus.api.port}
  client{
    id = ""
    id = ${?AUTHPLUS_CLIENT_ID}
    secret = ""
    secret = ${?AUTHPLUS_CLIENT_SECRET}
  }
}

keyserver {
  host = "localhost"
  host = ${?TUF_KEYSERVER_HOST}
  port = 8085
  port = ${?TUF_KEYSERVER_PORT}
  uri = "http://"${keyserver.host}":"${keyserver.port}
}

reposerver {
  # add some extra bytes for headers
  sizeLimit = 536872000 // > 512Mb
  sizeLimit = ${?TUF_REPOSERVER_SIZE_LIMIT}
  uploadRequestTimeout = akka-http.server.request-timeout
  uploadRequestTimeout = ${?TUF_REPOSERVER_UPLOAD_REQUEST_TIMEOUT}
}


ats {
  metricsReporter {
    reportMetrics = true
    reportMetrics = ${?REPORT_METRICS}
    serviceName=tuf-reposerver
    serviceName=${?SERVICE_NAME}
    instanceId=${ats.metricsReporter.serviceName}
    instanceId=${?MESOS_TASK_ID}
  }

  database {
    asyncMigrations = true
    asyncMigrations = ${?ASYNC_MIGRATE}
  }
}
